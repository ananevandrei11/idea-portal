services:
  # app:
  #   build:
  #     context: ./webapp
  #     dockerfile: Dockerfile
  #   container_name: webapp
  #   ports:
  #     - '8000:8000'  # Порт, который будет открыт для веб-приложения
  #   volumes:
  #     - ./app/webapp:/app  # Монтируем локальные файлы в контейнер
  #     - /app/node_modules   # Монтируем node_modules для предотвращения конфликта
  #   networks:
  #     - family-network

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    ports:
      - '6500:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  server:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: server
    ports:
      - '3000:3000'
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://admin:admin@postgres:5432/idea_portal?schema=public # Использование имени контейнера postgres
    networks:
      - app-network
    command: >
      sh -c "
      until pg_isready -h postgres -p 5432; do
        echo 'Waiting for postgres...'
        sleep 2;
      done;
      pnpm back prisma migrate dev && pnpm back prisma generate"

networks:
  app-network:
volumes:
  pgdata:
